{"version":3,"sources":["styles/select.js","components/Select/View.js","Utils/compare.js","components/Select/Controller.js","styles/table.js","components/Table/View.js","components/Table/utils/getTaskColorStatus.js","components/Table/utils/getRowsOfTasks.js","components/Table/utils/getStudTaskColorStatus.js","components/Table/utils/getRowsOfStudentsTasks.js","components/Table/Controller.js","components/Table/index.js","styles/app.js","components/Select/index.js","components/App/index.js","serviceWorker.js","Utils/getMentorFromLocalstorage.js","index.js"],"names":["selectContainer","display","flexDirection","width","height","border","fontSize","mentorP","textAlign","margin","paddingTop","borderRight","select","View","props","onChange","optionElements","react_default","a","createElement","style","id","compare","b","getOptions","collection","selectedElement","slice","sort","map","element","index","value","key","concat","selected","Controller","options","Select_View","e","github","target","localStorage","setItem","JSON","stringify","mentorGithub","table","minWidth","tableHeader","minHeight","borderBottom","headerTaskColumn","widht","headerStudentsColumn","tableBody","tasksColumn","taskRow","borderTop","studentsColumn","studentColumn","borderLeft","emptyCell","color","rowsOfTasks","rowsOfStudentTasks","className","getTaskColorStatus","taskStatus","tasksStyle","backgroundColor","getRowsOfTasks","objectOfTasks","tasksRows","listOfTasks","titleOfTask","taskIndex","taskObject","title","link","status","taskId","colorStatus","href","getStudTaskColorStatus","studentTaskStatus","mark","background","getRowsOfStudentsTasks","objectOfMentor","listOfStudents","students","nameOfStudent","student","githubLink","tasks","studentTasks","tasksTitle","currentTask","pullRequest","taskNumber","mentorObject","Table_View","Table","Table_Controller","containerStyle","justifyContent","Select","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","handleChange","bind","assertThisInitialized","newName","setState","_this$props","data","mentor","mentors","Select_Controller","components_Table","selectedMentor","React","Component","App","allMentorsNames","components_Select","Boolean","window","location","hostname","match","getMentorFromLocalstorage","getItem","parse","render","components_App","mentorStudent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.919bf194.chunk.js","sourcesContent":["export const selectContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  width: '30%',\n  height: '30px',\n  border: '2px solid black',\n  fontSize: 18,\n};\n\nexport const mentorP = {\n  width: '50%',\n  textAlign: 'center',\n  margin: 0,\n  paddingTop: 3,\n  borderRight: '1px solid black',\n};\n\nexport const select = {\n  width: '50%',\n  textAlign: 'center',\n  border: 'none',\n};\n","import React from 'react';\nimport { arrayOf, node, func } from 'prop-types';\nimport { selectContainer, mentorP, select } from '../../styles/select';\n\nfunction View(props) {\n  const { onChange, optionElements } = props;\n  return (\n    <div style={selectContainer}>\n      <p style={mentorP}>Mentor</p>\n      <select id=\"great-names\" onChange={onChange} style={select}>\n        <option>\n            Choose mentor\n        </option>\n        {optionElements}\n      </select>\n    </div>\n  );\n}\n\nView.propTypes = {\n  optionElements: arrayOf(node).isRequired,\n  onChange: func.isRequired,\n};\n\nexport default View;\n","/*\n  *This function is an argument for array.sort.\n   It sets how to sort collection: by alphabet if it contains 'string'\n   or from less to more if it constains 'number'\n*/\nconst compare = (a, b) => {\n  if (a < b) {\n    return -1;\n  } if (a > b) return 1;\n  return 0;\n};\n\nexport default compare;\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport { arrayOf, string, func } from 'prop-types';\nimport View from './View';\nimport compare from '../../Utils/compare';\n\n/*\n  *This function creates option elements from elements of collection\n    and selects one(this one is pointed as second argument).\n*/\nconst getOptions = (collection, selectedElement) => {\n  const arrayFromCollection = collection // Copy array from arguments and sort\n    .slice()\n    .sort(compare);\n\n  // Create element option from collection\n  const options = arrayFromCollection.map((element, index) => {\n    const id = index + 1;\n    if (element === selectedElement) {\n      return <option value={element} key={`option_${id}`} selected>{element}</option>;\n    }\n    return <option value={element} key={`option_${id}`}>{element}</option>;\n  });\n  return options;\n};\n/*\n  *This function contains logic of Select component\n*/\nfunction Controller(props) {\n  // This function takes selected option and changes state of main component\n  const handleChange = (e) => {\n    const github = e.target.value;\n    localStorage.setItem('mentor-dashboard', JSON.stringify({ mentorGithub: github }));\n    const { onChange } = props;\n    onChange(github);\n  };\n\n  const { collection, selected } = props;\n  const options = getOptions(collection, selected);\n\n  return (\n    <View onChange={handleChange} optionElements={options} />\n  );\n}\n\nController.propTypes = {\n  collection: arrayOf(string).isRequired,\n  selected: string.isRequired,\n  onChange: func.isRequired,\n};\n\nexport default Controller;\n","/*\n*Styles for table\n*/\nexport const table = {\n  display: 'flex',\n  flexDirection: 'column',\n  minWidth: 320,\n  border: '2px solid black',\n  width: 'fit-content',\n};\n\n/*\n*Styles for table header\n*/\nexport const tableHeader = {\n  display: 'flex',\n  flexDirection: 'row',\n  minHeight: 30,\n  borderBottom: '2px solid black',\n};\n\nexport const headerTaskColumn = {\n  minWidth: 220,\n  widht: '44%',\n  textAlign: 'center',\n  borderRight: '2px solid black',\n};\n\nexport const headerStudentsColumn = {\n  minWidth: 100,\n  width: '66%',\n  textAlign: 'center',\n};\n/*\n*Styles for table body\n*/\nexport const tableBody = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nexport const tasksColumn = {\n  display: 'flex',\n  flexDirection: 'column',\n  minWidth: 220,\n  borderRight: '2px solid black',\n};\n\nexport const taskRow = {\n  borderTop: '1px solid black',\n};\n\nexport const studentsColumn = {\n  display: 'flex',\n  flexDirection: 'row',\n  minWidth: 100,\n};\n\nexport const studentColumn = {\n  textAlign: 'center',\n  borderTop: '1px solid black',\n  borderLeft: '1px solid black',\n};\n\nexport const studentsStudent = {\n  minWidth: 100,\n  height: 'inherit',\n  textAlign: 'center',\n  display: 'flex',\n  alignItems: 'center',\n  padding: 5,\n  borderLeft: '1px solid black',\n};\n\nexport const emptyCell = {\n  color: 'white',\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport {\n  objectOf, any, arrayOf, object,\n} from 'prop-types';\nimport {\n  table, tableHeader, headerTaskColumn, headerStudentsColumn, tableBody, tasksColumn, studentsColumn,\n} from '../../styles/table';\n\nfunction View(props) {\n  const { rowsOfTasks, rowsOfStudentTasks } = props;\n\n  return (\n    <div className=\"table\" style={table}>\n\n      <div className=\"table__header\" style={tableHeader}>\n        <div className=\"header__task-column\" style={headerTaskColumn}>\n          <h3>Tasks</h3>\n        </div>\n        <div className=\"header__students-column\" style={headerStudentsColumn}>\n          <h3>Students</h3>\n        </div>\n      </div>\n\n      <div className=\"table__body\" style={tableBody}>\n        <div className=\"tasksColumn\" style={tasksColumn}>\n          {rowsOfTasks}\n        </div>\n        <div className=\"students-rows\" style={studentsColumn}>\n          {rowsOfStudentTasks}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nView.propTypes = {\n  rowsOfTasks: objectOf(any).isRequired,\n  rowsOfStudentTasks: arrayOf(object).isRequired,\n};\n\nexport default View;\n","/*\n    *This function check status of task\n     and return background of task cell\n  */\nconst getTaskColorStatus = (taskStatus) => {\n  const tasksStyle = {};\n\n  switch (taskStatus) {\n    case 'Checking':\n      tasksStyle.backgroundColor = 'red';\n      break;\n    case 'ToDo':\n      tasksStyle.backgroundColor = 'gray';\n      break;\n    case 'In Progress':\n      tasksStyle.backgroundColor = 'yellow';\n      break;\n    case 'Checked':\n      tasksStyle.backgroundColor = 'green';\n      break;\n    default:\n      break;\n  }\n\n  return tasksStyle;\n};\n\nexport default getTaskColorStatus;\n","import React from 'react';\nimport getTaskColorStatus from './getTaskColorStatus';\nimport { taskRow, emptyCell } from '../../../styles/table';\n\n/*\n*This function create task's elements.\n*/\nconst getRowsOfTasks = (objectOfTasks) => {\n  const { listOfTasks } = objectOfTasks;\n\n  const tasksRows = listOfTasks.map((titleOfTask, taskIndex) => {\n    const taskObject = objectOfTasks[titleOfTask];\n    const { title, link, status } = taskObject;\n    const taskId = 1 + taskIndex;\n\n    const colorStatus = getTaskColorStatus(status);\n\n    return (\n      <div className=\"row__task\" key={`task_${taskId}`} style={taskRow}>\n        <div className=\"task__cell\" style={colorStatus}>\n          <a href={link}>\n            {title}\n          </a>\n        </div>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"task-container\" style={tasksRows}>\n      <div className=\"empty-cell\" style={emptyCell}>55555</div>\n      {tasksRows}\n    </div>\n  );\n};\n\nexport default getRowsOfTasks;\n","/*\n  *This function check status of student task\n   and return background of task cell\n*/\nconst getStudTaskColorStatus = (studentTaskStatus, mark) => {\n  const tasksStyle = {};\n\n  if ((studentTaskStatus === 'Checked' || 'Checking') && mark > 0) {\n    tasksStyle.background = 'green';\n  }\n\n  if (studentTaskStatus === 'Checking' && mark === 0) {\n    tasksStyle.background = 'red';\n  }\n\n  if (studentTaskStatus === 'Checked' && mark === 0) {\n    tasksStyle.backgroundColor = 'darkred';\n  }\n\n  switch (studentTaskStatus) {\n    case 'checking':\n      tasksStyle.backgroundColor = 'red';\n      break;\n    case 'In Progress':\n      tasksStyle.backgroundColor = 'yellow';\n      break;\n    case 'ToDo':\n      tasksStyle.backgroundColor = 'lightgray';\n      break;\n    default:\n      break;\n  }\n  return tasksStyle;\n};\n\nexport default getStudTaskColorStatus;\n","import React from 'react';\nimport getStudTaskColorStatus from './getStudTaskColorStatus';\nimport { studentColumn } from '../../../styles/table';\n\n/*\n*This function creates rows with students\n*/\nconst getRowsOfStudentsTasks = (objectOfMentor, objectOfTasks) => {\n  const { listOfTasks } = objectOfTasks;\n  const { listOfStudents, students } = objectOfMentor;\n\n  const studentsRows = listOfStudents.map((nameOfStudent) => {\n    const student = students[nameOfStudent];\n    const { github, githubLink, tasks } = student;\n\n    const studentTasks = listOfTasks.map((tasksTitle, index) => {\n      const currentTask = tasks[tasksTitle];\n      const { status, mark, pullRequest } = currentTask;\n      const taskNumber = 1 + index;\n\n      const colorStatus = getStudTaskColorStatus(status, mark);\n\n      return (\n        <div className=\"student-column\" key={`${github}-task_${taskNumber}`} style={studentColumn}>\n          <div style={colorStatus}>\n            <a href={pullRequest}>{mark}</a>\n          </div>\n        </div>\n      );\n    });\n\n    return (\n      <div>\n        <div style={{ borderRight: '1px solid black', minWidth: 100, textAlign: 'center' }}>\n          <a href={githubLink}>{github}</a>\n        </div>\n        {studentTasks}\n      </div>\n    );\n  });\n\n  return studentsRows;\n};\n\nexport default getRowsOfStudentsTasks;\n","import React from 'react';\nimport { instanceOf } from 'prop-types';\nimport View from './View';\nimport getRowsOfTasks from './utils/getRowsOfTasks';\nimport getRowsOfStudentsTasks from './utils/getRowsOfStudentsTasks';\n\nfunction Controller(props) {\n  const { tasks, mentorObject } = props;\n\n  const rowsOfTasks = getRowsOfTasks(tasks);\n  const rowsOfStudentTasks = getRowsOfStudentsTasks(mentorObject, tasks);\n\n  return (\n    <View rowsOfTasks={rowsOfTasks} rowsOfStudentTasks={rowsOfStudentTasks} />\n  );\n}\n\nController.propTypes = {\n  tasks: instanceOf(Object).isRequired,\n  mentorObject: instanceOf(Object).isRequired,\n};\n\nexport default Controller;\n","import React from 'react';\nimport { instanceOf } from 'prop-types';\nimport Controller from './Controller';\n\nfunction Table(props) {\n  const { tasks, mentorObject } = props;\n  return (\n    <Controller tasks={tasks} mentorObject={mentorObject} />\n  );\n}\n\nTable.propTypes = {\n  tasks: instanceOf(Object).isRequired,\n  mentorObject: instanceOf(Object).isRequired,\n};\n\nexport default Table;\n","const containerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  minWidth: 300,\n  minHeight: 350,\n  justifyContent: 'space-between',\n};\n\nexport default containerStyle;\n","import React from 'react';\nimport { arrayOf, string, instanceOf } from 'prop-types';\nimport Controller from './Controller';\nimport Table from '../Table';\nimport containerStyle from '../../styles/app';\n\nclass Select extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(newName) {\n    this.setState({ name: newName });\n  }\n\n  render() {\n    const { name } = this.state;\n    const { data, tasks, mentors } = this.props;\n    const mentor = mentors[name];\n\n    return (\n      <div style={containerStyle}>\n        <Controller onChange={this.handleChange} selected={name} collection={data} />\n        <Table tasks={tasks} mentorObject={mentor} selectedMentor={name} />\n      </div>\n    );\n  }\n}\n\nSelect.propTypes = {\n  data: arrayOf(string).isRequired,\n  name: string.isRequired,\n  tasks: instanceOf(Object).isRequired,\n  mentors: instanceOf(Object).isRequired,\n};\n\nexport default Select;\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport { instanceOf, string } from 'prop-types';\nimport Select from '../Select';\n\nfunction App(props) {\n  const { data } = props;\n  let { name } = props;\n  const { allMentorsNames, mentor, tasks } = data;\n  // if name does not in localstorage yet\n  if (name === '') {\n    name = 'a-yatskevich';\n  }\n\n  return (\n    <Select data={allMentorsNames} name={name} tasks={tasks} mentors={mentor} />\n  );\n}\n\nApp.propTypes = {\n  data: instanceOf(Object).isRequired,\n  name: string.isRequired,\n};\n\nexport default App;\n","/* eslint-disable no-console */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-undef */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nfunction getMentorFromLocalstorage() {\n  let value = localStorage.getItem('mentor-dashboard');\n  if (value) {\n    value = JSON.parse(value);\n    return value.mentorGithub;\n  }\n  return '';\n}\n\nexport default getMentorFromLocalstorage;\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nimport { unregister } from './serviceWorker';\nimport mentorStudent from './mentor-student.json';\nimport getMentorFromLocalstorage from './Utils/getMentorFromLocalstorage';\n\nconst mentorGithub = getMentorFromLocalstorage();\n\nrender(<App name={mentorGithub} data={mentorStudent} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}